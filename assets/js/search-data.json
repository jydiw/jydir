{
  
    
        "post0": {
            "title": "COVID-19 County Analysis",
            "content": "The most recent polling from Civiqs shows a large discrepancy in COVID-19 sentiment, split along party lines: . Party ExtremelyConcerned ModeratelyConcerned A LittleConcerned Not ConcernedAt All Unsure . Democrat | 63% | 27% | 8% | 2% | &lt;1% | . Republican | 10% | 22% | 29% | 38% | &lt;1% | . Independent | 34% | 26% | 19% | 20% | &lt;1% | . Because of this, it can be easy for one&#39;s own party to blame the other, when the reality is probably more complex. . This post will focus on the following factors and how they relate to up-to-date COVID-19 data. . About . Data Sources . The New York Times COVID-19 repository | The United States Census | Plotly&#39;s county-level GeoJSON | nomanatim and polygons | github.com/tonmcg and RRH Elections | . How this data was merged . Refer to the following notebooks to follow along with this project: . placeholder | another placeholder | . Exploring the Correlations . The following are, upon shallow inspection, positively correlated with the total number of cases and deaths per county: . population density (pop_density) | percent black (per_black) | percent hispanic (per_hispanic) | percent of 25y+ without high school diploma or GED (per_no_hs) | . The following are negatively correlated with the total number of cases and deaths per county: . percent white (per_white) | adjusted percent votes GOP in the 2016 general election (per_gop) | educational coefficient (edu) | . These are merely correlations; it would be socially irresponsible to imply causality in any of these relationships. . Text(0.5, 0.98, &#39;covid correlation heatmap&#39;) . Scatter Plots (with color and size axes) . In each chart: . color -- percent GOP (calculated as 2-party percentage) in the 2016 general election | size -- total cases | . #collapse-hide def make_bubble_chart(df, params, line=True, split=False, clip=False): smax = np.max(df[params[&#39;s_col&#39;]]) smax = smax + (-smax) % 10 base = alt.Chart(df).properties( title=params[&#39;chart_title&#39;], width=720, height=480 ) circles = base.mark_circle(stroke=&#39;black&#39;, strokeWidth=0.25, opacity=0.5).encode( x=alt.X( params[&#39;x_col&#39;] + &#39;:Q&#39;, scale=alt.Scale(type=params[&#39;x_scale&#39;], zero=False) ), y=alt.Y( params[&#39;y_col&#39;] + &#39;:Q&#39;, scale=alt.Scale(type=params[&#39;y_scale&#39;], zero=False) ), size=alt.Size( params[&#39;s_col&#39;] + &#39;:Q&#39;, scale=alt.Scale( domain=[1,smax], range=[10,2000] ), ), color=alt.Color( params[&#39;c_col&#39;] + &#39;:Q&#39;, scale=alt.Scale( scheme=params[&#39;c_scheme&#39;], domain=[np.percentile(df[params[&#39;c_col&#39;]], 0.5), np.percentile(df[params[&#39;c_col&#39;]], 99.5)], domainMid=params[&#39;c_mid&#39;], ), sort=params[&#39;c_sort&#39;], ), tooltip=[ &#39;state:N&#39;, &#39;county:N&#39;, &#39;cases:Q&#39;, &#39;deaths:Q&#39;, alt.Tooltip( params[&#39;c_col&#39;] + &#39;:Q&#39;, format=&#39;.2f&#39;, ), alt.Tooltip( params[&#39;y_col&#39;] + &#39;:Q&#39;, format=&#39;.2f&#39;, ), alt.Tooltip( params[&#39;x_col&#39;] + &#39;:Q&#39;, format=&#39;.2f&#39;, ) ] ) def make_line(df, params, _split=None, _domain=None): colors = [&#39;darkblue&#39;, &#39;firebrick&#39;] if _split in [0, 1]: df = df[df[&#39;gop&#39;]==_split] _color = colors[_split] else: _color = &#39;black&#39; pfit = poly.polyfit( df[params[&#39;x_col&#39;]], df[params[&#39;y_col&#39;]], 1, w=df[params[&#39;w_col&#39;]] ) fit = poly.polyval(np.unique(df[params[&#39;x_col&#39;]]), pfit) line_df = pd.DataFrame({ &#39;x&#39;: np.unique(df[params[&#39;x_col&#39;]]), &#39;y&#39;: fit }) _line = alt.Chart(line_df).mark_line( color=_color, strokeDash=[2,1], clip=True ).encode( x=&#39;x:Q&#39;, y=alt.Y( &#39;y:Q&#39;, scale=alt.Scale(domain=[ df[params[&#39;y_col&#39;]].min(), df[params[&#39;y_col&#39;]].max() ]) ) ) return _line if line: if split: _line0 = make_line(df, params, _split=0) _line1 = make_line(df, params, _split=1) return circles + _line0 + _line1 else: _line = make_line(df, params) return circles + _line else: return circles . . COVID-19 Density and Mortality Rate vs. Population Density . By far the largest predictor of total cases/deaths is population density. This does not appear to be an unfair characterization, given the fact that the disease spreads from person-to-person. Dense urban centers tend to lean Democratic, whereas sparse rural counties tend to lean Republican. Therefore, it makes sense that urban Democratic centers are being hit harder than their rural Republican counterparts. . The effects of urban density are further illustrated when discussing the mortality rate. In New York City, over 10% of those diagnosed have passed due to complications from the virus. . COVID-19 Density vs. Median Income . COVID-19 Density vs. Educational Attainment . Educational attainment (edu) is defined as the weighted average of the highest degree of education for persons 25 and older within a given county: . no HS -- 0 | some HS -- 1 | HS diploma or GED -- 2 | some college -- 3 | associate&#39;s degree -- 4 | bachelor&#39;s degree -- 5 | graduate or professional degree - 6 | . New Cases per 100k vs. Percent GOP . Recent COVID-19 cases, however, seem to be more prevalent in more GOP-weighted counties. . This is most likely skewed by the fact that New York City -- a prior epicenter of COVID-19 cases -- has relatively few cases now. . Change in New Cases per 100k vs. Percent GOP . Change in New Cases vs. New Cases . &quot;Iceberg&quot; Plots . I&#39;ve coined the term &quot;iceberg&quot; to refer to a stacked area chart where the two halves are split along the median of the color axis . Comparing New Cases vs. Percent GOP . #collapse-hide def make_iceberg_chart(df, params): base = alt.Chart(df).properties( title=params[&#39;chart_title&#39;], width=720, height=480 ) c_datum = &#39;datum.&#39; + params[&#39;c_col&#39;] # top of iceberg points0 = base.mark_area().transform_filter( (eval(c_datum) &gt;= params[&#39;c_mid&#39;]) ).encode( alt.X(&#39;date:T&#39;, title=&#39;Date&#39;), alt.Y(params[&#39;y_col&#39;] + &#39;:Q&#39;), color=alt.Color( params[&#39;c_col&#39;] + &#39;:Q&#39;, scale=alt.Scale( scheme=params[&#39;c_scheme&#39;], domain=[np.percentile(df[params[&#39;c_col&#39;]].unique(), 0.5), np.percentile(df[params[&#39;c_col&#39;]].unique(), 99.5)], domainMid=params[&#39;c_mid&#39;], ), sort=params[&#39;c_sort&#39;], ), order=alt.Order(params[&#39;c_col&#39;], sort=&#39;ascending&#39;) ) # bottom of iceberg points1 = base.mark_area().transform_filter( (eval(c_datum) &lt; params[&#39;c_mid&#39;]) ).transform_calculate( y_alt=&#39;datum.&#39; + params[&#39;y_col&#39;] + &#39; * -1&#39; ).encode( alt.X(&#39;date:T&#39;, title=&#39;Date&#39;), alt.Y(&#39;y_alt:Q&#39;, axis=alt.Axis(format=&#39;(.2s&#39;)), color=alt.Color( params[&#39;c_col&#39;] + &#39;:Q&#39;, scale=alt.Scale( scheme=params[&#39;c_scheme&#39;], domain=[np.percentile(df[params[&#39;c_col&#39;]].unique(), 1), np.percentile(df[params[&#39;c_col&#39;]].unique(), 99)], domainMid=params[&#39;c_mid&#39;], ), sort=params[&#39;c_sort&#39;], ), order=alt.Order(params[&#39;c_col&#39;], sort=&#39;descending&#39;), ) df[&#39;zero&#39;] = 0 zero = base.mark_line(color=&#39;black&#39;).encode( x=&#39;date&#39;, y=&#39;zero&#39;, size=alt.value(0.5) ) layer = alt.layer(points0, points1, zero).encode( tooltip=[ &#39;state:N&#39;, &#39;county:N&#39;, alt.Tooltip( params[&#39;y_col&#39;] + &#39;:Q&#39;, format=&#39;.2f&#39;, ) ] ) return layer . . Democratic counties still comprise most daily cases compared to their Republican counterparts. . norm_cases = alt.Chart(df).mark_area().encode( alt.X(&#39;date:T&#39;, title=&#39;Date&#39;), alt.Y(&#39;cases:Q&#39;, stack=&#39;normalize&#39;), color=alt.Color( &#39;per_gop&#39; + &#39;:Q&#39;, scale=alt.Scale( scheme=&#39;redblue&#39;, domain=[np.percentile(df[&#39;per_gop&#39;].unique(), 0.5), np.percentile(df[&#39;per_gop&#39;].unique(), 99.5)], domainMid=0.5, ), sort=&#39;descending&#39;, ), ) norm_cases.save(&#39;docs/norm_cases.html&#39;) norm_cases . However, when looking at the share of total cases, Republican counties are catching up due to the virus hitting the Southern states. . #collapse-hide def make_normed_iceberg_chart(df, params): base = alt.Chart(df).properties( title=params[&#39;chart_title&#39;], width=720, height=480 ) c_datum = &#39;datum.&#39; + params[&#39;c_col&#39;] y_datum = &#39;datum.&#39; + params[&#39;y_col&#39;] # top of iceberg points0 = base.mark_area().transform_filter( (eval(c_datum) &gt;= params[&#39;c_mid&#39;]) ).transform_joinaggregate( pop_0=&#39;sum(total_pop)&#39;, ).transform_calculate( per_y=y_datum + &#39; / datum.pop_0&#39; ).encode( alt.X(&#39;date:T&#39;, title=&#39;Date&#39;), alt.Y(&#39;per_y:Q&#39;), color=alt.Color( params[&#39;c_col&#39;] + &#39;:Q&#39;, scale=alt.Scale( scheme=params[&#39;c_scheme&#39;], domain=[np.percentile(df[params[&#39;c_col&#39;]].unique(), 0.5), np.percentile(df[params[&#39;c_col&#39;]].unique(), 99.5)], domainMid=params[&#39;c_mid&#39;], ), sort=params[&#39;c_sort&#39;], ), order=alt.Order(params[&#39;c_col&#39;], sort=&#39;ascending&#39;) ) # bottom of iceberg points1 = base.mark_area().transform_filter( (eval(c_datum) &lt; params[&#39;c_mid&#39;]) ).transform_joinaggregate( pop_1=&#39;sum(total_pop)&#39;, ).transform_calculate( per_y=y_datum + &#39; / datum.pop_1 * -1&#39; ).encode( alt.X(&#39;date:T&#39;, title=&#39;Date&#39;), alt.Y(&#39;per_y:Q&#39;, axis=alt.Axis(format=&#39;(.2s&#39;)), color=alt.Color( params[&#39;c_col&#39;] + &#39;:Q&#39;, scale=alt.Scale( scheme=params[&#39;c_scheme&#39;], domain=[np.percentile(df[params[&#39;c_col&#39;]].unique(), 1), np.percentile(df[params[&#39;c_col&#39;]].unique(), 99)], domainMid=params[&#39;c_mid&#39;], ), sort=params[&#39;c_sort&#39;], ), order=alt.Order(params[&#39;c_col&#39;], sort=&#39;descending&#39;), ) df[&#39;zero&#39;] = 0 zero = base.mark_line(color=&#39;black&#39;).encode( x=&#39;date&#39;, y=&#39;zero&#39;, size=alt.value(0.5) ) layer = alt.layer(points0, points1, zero).encode( tooltip=[ &#39;state:N&#39;, &#39;county:N&#39;, alt.Tooltip( params[&#39;y_col&#39;] + &#39;:Q&#39;, format=&#39;.0f&#39;, ) ] ) return layer . . However, Democratic counties have, on average, a much higher population than Republic counties. Taking into account the total populations of the two &quot;halves&quot;, we find that the virus is affecting a near-identical proportion of people. . # norm_new_cases = alt.Chart(df).mark_area().encode( # alt.X(&#39;date:T&#39;, title=&#39;Date&#39;), # alt.Y(&#39;new_cases:Q&#39;, stack=&#39;normalize&#39;), # color=alt.Color( # &#39;per_gop&#39; + &#39;:Q&#39;, # scale=alt.Scale( # scheme=&#39;redblue&#39;, # domain=[np.percentile(df[&#39;per_gop&#39;].unique(), 0.5), # np.percentile(df[&#39;per_gop&#39;].unique(), 99.5)], # domainMid=0.5, # ), # sort=&#39;descending&#39;, # ), # ) # norm_new_cases.save(&#39;docs/norm_new_cases.html&#39;) # norm_new_cases . Comparing New Cases vs. Educational Attainment . params = dict( chart_title=&#39;cases per day&#39;, y_col=&#39;new_cases&#39;, c_col=&#39;edu&#39;, c_scheme=&#39;plasma&#39;, c_mid=df[&#39;edu&#39;].median(), c_sort=&#39;descending&#39; ) ice_edu = make_iceberg_chart(df, params) ice_edu.save(&#39;docs/ice_edu.html&#39;) ice_edu . Comparing New Cases vs. Median Income . Strangely enough, while there didn&#39;t seem to be a large correlation between new cases and median income (for the most recent 15-day window), we can see from this iceberg plot that low-income counties are disproportionately affected by COVID-19. . params = dict( chart_title=&#39;cases per day&#39;, y_col=&#39;new_cases&#39;, c_col=&#39;median_income&#39;, c_scheme=&#39;lightmulti&#39;, c_mid=61937, c_sort=&#39;ascending&#39; ) ice_inc = make_iceberg_chart(df, params) ice_inc.save(&#39;docs/ice_inc.html&#39;) ice_inc . params = dict( chart_title=&#39;cases per day&#39;, y_col=&#39;new_cases&#39;, c_col=&#39;median_income&#39;, c_scheme=&#39;lightmulti&#39;, c_mid=61937, c_sort=&#39;ascending&#39; ) ice_inc_normed = make_normed_iceberg_chart(df, params) # ice_inc_normed.save(&#39;docs/ice_inc_normed.html&#39;) ice_inc_normed .",
            "url": "https://jydiw.github.io/jydir/covid-19/data-visualization/2020/07/30/covid-misconceptions.html",
            "relUrl": "/covid-19/data-visualization/2020/07/30/covid-misconceptions.html",
            "date": " • Jul 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jydiw.github.io/jydir/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jydiw.github.io/jydir/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jydiw.github.io/jydir/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jydiw.github.io/jydir/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}